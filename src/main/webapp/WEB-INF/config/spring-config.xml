<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:beans="http://www.springframework.org/schema/beans"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
                http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
                http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/common/**" location="/WEB-INF/static/common/" />
	<resources mapping="/images/**" location="/WEB-INF/static/images/" />
	<resources mapping="/upload/**" location="/WEB-INF/upload/" />
	
	
	
	<resources mapping="/common/**" location="/WEB-INF/static/common/" />
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>

<!--=== tiles기반으로 화면을 만드는 ViewResolver 등록 =====-->
<!-- 1. tiles설정파일을 읽어서 작업할 수 있도록 설정파일을 등록 -->
         <beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
                <beans:property name="definitions">
                        <beans:list>
                                <beans:value>/WEB-INF/**/tiles-*.xml</beans:value>
                        </beans:list>
                </beans:property>
        </beans:bean>
       <!--  2. Tiles기반으로 뷰를 만들 수 있도록 ViewResolver를 등록  -->
        <beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
                <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
                <beans:property name="order" value="1"/>
        </beans:bean>




<!--================================= mybatis연결 ============================================================== -->
        <!-- spring과 mybatis연결클래스(mybatis에서 오라클을 연결) -->
        <beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
                <beans:property name="dataSource" ref="ds" />
                <beans:property name="configLocation"
                        value="/WEB-INF/config/mybatis-config.xml" />
        </beans:bean>

        <!-- mybatis의 핵심클래스(sql을 실행하기 위한 메소드를 제공 ) -->
        <beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
                <beans:constructor-arg ref="sqlSessionFactory" />
        </beans:bean>









<!-- DataSource방식 : WAS에 등록된 커넥션풀을 이용해서 작업하는 방식 -->
	<beans:bean id="ds" class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="jdbc/myspring" />
		<beans:property name="resourceRef" value="true" />
	</beans:bean>
	<!-- sql을 실행할 수 있도록 기능을 제공하는 클래스 -->
	<beans:bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:constructor-arg ref="ds" />
	</beans:bean>
	
	<!-- 파일업로드 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="4000000"/>
	</beans:bean>
	
	
	<!-- 인터셉터  mapping이 어떤요청에대해서 인터셉터를 적용할껀지 명시 // 제외할꺼는 exclude-mapping -->
	<interceptors>
		<interceptor> 
		<!-- 전체를 등록하고, 제외할것만 작성해주는게 빠름 -->
			<mapping path="/**"/>
			<exclude-mapping path="/page_test3_2/**"/>
			<exclude-mapping path="/index.do"/>
			<exclude-mapping path="/login_Page"/>
			<exclude-mapping path="/login.do"/>
			<exclude-mapping path="/b_ajax.do"/>
			
			<beans:bean class="com.multi.ggo.intercepter.InterCepter"/>
		</interceptor>
	</interceptors>
	
	
	
<!-- aop작업을 수행하는 proxy가 자동으로 감지해서, aop등록된 것을 확인하고 실행될 수 있도록 처리  -->
	<aop:aspectj-autoproxy/> 
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
<!-- ______________________________________________________________________________________ -->

	<context:component-scan base-package="com.multi.ggo" />
	<context:component-scan base-package="com" />
	<context:component-scan base-package="com.multi.ggo.board" />
	<context:component-scan base-package="main" />









</beans:beans>
